name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch: # Allow manual triggering

jobs:
  deploy-backend:
    name: Deploy Backend API
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: '2.4.3'

      - name: Validate Backend
        run: |
          cd apps/api
          echo "üîç Validating backend configuration..."
          deno check src/main.ts
          echo "‚úÖ Backend validation passed"

      - name: Deploy Backend to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            echo "üöÄ Starting backend deployment..."
            cd /var/www/rrcompanion
            
            # Pull latest changes
            git pull origin main
            
            # Install/update Deno dependencies
            cd apps/api
            deno cache --reload src/main.ts
            
            # Restart the service
            sudo systemctl restart rrcompanion-api
            
            # Check service status
            sudo systemctl status rrcompanion-api --no-pager
            
            echo "‚úÖ Backend deployment completed!"

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: deploy-backend # Wait for backend to deploy first
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Dependencies
        run: |
          echo "üì¶ Installing dependencies from root..."
          npm ci
          echo "‚úÖ Dependencies installed successfully"

      - name: Build Frontend
        run: |
          echo "üî® Building frontend..."
          npm run build --workspace=apps/web
          echo "‚úÖ Frontend built successfully"
        env:
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}

      - name: Deploy Frontend to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            echo "üé® Starting frontend deployment..."
            cd /var/www/rrcompanion
            
            # Pull latest changes
            git pull origin main
            
            # Install dependencies and build frontend
            echo "üì¶ Installing dependencies..."
            npm ci
            echo "üî® Building frontend..."
            cd apps/web
            npm run build
            
            # Copy built files to web root (adjust path based on your Caddy config)
            sudo cp -r dist/* /var/www/html/
            
            # Set proper permissions
            sudo chown -R www-data:www-data /var/www/html/
            sudo chmod -R 755 /var/www/html/
            
            # Restart Caddy if needed
            sudo systemctl reload caddy
            
            echo "‚úÖ Frontend deployment completed!"

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: [deploy-backend, deploy-frontend]
    
    steps:
      - name: Wait for services to start
        run: sleep 30

      - name: Check Backend Health
        run: |
          echo "üîç Checking backend health..."
          for i in {1..5}; do
            if curl -f ${{ secrets.BACKEND_URL }}/api/health; then
              echo "‚úÖ Backend is healthy!"
              break
            else
              echo "‚è≥ Backend not ready yet, attempt $i/5..."
              if [ $i -eq 5 ]; then
                echo "‚ùå Backend health check failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: Check Frontend
        run: |
          echo "üîç Checking frontend..."
          for i in {1..3}; do
            if curl -f ${{ secrets.FRONTEND_URL }}; then
              echo "‚úÖ Frontend is accessible!"
              break
            else
              echo "‚è≥ Frontend not ready yet, attempt $i/3..."
              if [ $i -eq 3 ]; then
                echo "‚ùå Frontend check failed after 3 attempts"
                exit 1
              fi
              sleep 5
            fi
          done

      - name: Deployment Summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "Backend: ${{ secrets.BACKEND_URL }}"
          echo "Frontend: ${{ secrets.FRONTEND_URL }}" 