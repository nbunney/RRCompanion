name: Deploy to Production

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy RRCompanion
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: apps/web/package-lock.json

      - name: Setup Deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: '2.4.3'

      - name: Validate Backend
        run: |
          echo "üîç Validating backend configuration..."
          cd apps/api
          deno check src/main.ts
          echo "‚úÖ Backend validation passed"

      - name: Install Frontend Dependencies
        run: |
          cd apps/web
          npm ci

      - name: Validate Frontend
        run: |
          echo "üîç Validating frontend configuration..."
          cd apps/web
          npm run lint
          echo "‚úÖ Frontend validation passed"

      - name: Build Frontend
        run: |
          cd apps/web
          npm run build
        env:
          VITE_STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}

      - name: Deploy to Server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_SSH_PORT }}
          script: |
            set -e  # Exit on any error
            
            echo "üöÄ Starting RRCompanion deployment..."
            
            # Check if we're in the right directory
            if [ ! -f "/var/www/rrcompanion/apps/api/src/main.ts" ]; then
                echo "‚ùå Error: Please run from /var/www/rrcompanion directory"
                exit 1
            fi
            
            # Stop the API service
            echo "üõë Stopping API service..."
            sudo systemctl stop rrcompanion-api || echo "‚ö†Ô∏è Service was not running"
            
            # Pull latest changes
            echo "üì• Pulling latest changes..."
            cd /var/www/rrcompanion
            git pull origin main
            
            # Install frontend dependencies and build
            echo "üî® Building frontend..."
            cd apps/web
            npm ci
            npm run build
            
            # Check if build was successful
            if [ ! -d "dist" ]; then
                echo "‚ùå Frontend build failed"
                exit 1
            fi
            
            echo "‚úÖ Frontend built successfully"
            
            # Install/update Deno dependencies
            echo "üîß Updating Deno dependencies..."
            cd ../api
            deno cache --reload src/main.ts
            
            # Start the API service
            echo "üöÄ Starting API service..."
            sudo systemctl start rrcompanion-api
            
            # Wait a moment for the service to start
            sleep 10
            
            # Check if the service is running
            if sudo systemctl is-active --quiet rrcompanion-api; then
                echo "‚úÖ API service started successfully"
            else
                echo "‚ùå API service failed to start"
                sudo systemctl status rrcompanion-api
                exit 1
            fi
            
            # Copy built files to web root
            echo "üìÅ Copying frontend files..."
            cd ../web
            sudo cp -r dist/* /var/www/html/
            sudo chown -R www-data:www-data /var/www/html/
            sudo chmod -R 755 /var/www/html/
            
            # Reload Caddy
            echo "üîÑ Reloading Caddy..."
            sudo systemctl reload caddy
            
            # Check if Caddy is running
            if sudo systemctl is-active --quiet caddy; then
                echo "‚úÖ Caddy reloaded successfully"
            else
                echo "‚ùå Caddy failed to reload"
                sudo systemctl status caddy
                exit 1
            fi
            
            echo "üéâ Deployment completed successfully!"
            
            # Show service status
            echo "üìä Service Status:"
            sudo systemctl status rrcompanion-api --no-pager

  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Wait for services to start
        run: sleep 45

      - name: Check Backend Health
        run: |
          echo "üîç Checking backend health..."
          for i in {1..5}; do
            if curl -f ${{ secrets.BACKEND_URL }}/api/health; then
              echo "‚úÖ Backend is healthy!"
              break
            else
              echo "‚è≥ Backend not ready yet, attempt $i/5..."
              if [ $i -eq 5 ]; then
                echo "‚ùå Backend health check failed after 5 attempts"
                exit 1
              fi
              sleep 10
            fi
          done

      - name: Check Frontend
        run: |
          echo "üîç Checking frontend..."
          for i in {1..3}; do
            if curl -f ${{ secrets.FRONTEND_URL }}; then
              echo "‚úÖ Frontend is accessible!"
              break
            else
              echo "‚è≥ Frontend not ready yet, attempt $i/3..."
              if [ $i -eq 3 ]; then
                echo "‚ùå Frontend check failed after 3 attempts"
                exit 1
              fi
              sleep 5
            fi
          done

      - name: Deployment Summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "Backend: ${{ secrets.BACKEND_URL }}"
          echo "Frontend: ${{ secrets.FRONTEND_URL }}"
          echo "Health Check: ${{ secrets.BACKEND_URL }}/api/health" 